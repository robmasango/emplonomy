// <auto-generated />
using Emplonomy.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Emplonomy.Logic.Migrations
{
    [DbContext(typeof(EmplonomyContext))]
    [Migration("20171207133913_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Emplonomy.Model.AddressType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressTypeDesc")
                        .HasMaxLength(100);

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("AddressType","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100);

                    b.Property<int>("OrganisationID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("OrganisationID");

                    b.ToTable("Department","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.DepartmentManager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentID");

                    b.Property<int>("ManagerID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("ManagerID");

                    b.ToTable("DepartmentManager","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.EmplonomyUser", b =>
                {
                    b.Property<int>("ID");

                    b.Property<bool?>("AgreeTC");

                    b.Property<bool>("ConfirmedReg");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2017, 12, 7, 15, 39, 13, 450, DateTimeKind.Local));

                    b.Property<string>("EmailAddress");

                    b.Property<string>("EmailAddressAlt");

                    b.Property<string>("EmployeeNumber");

                    b.Property<int>("FailedPasswordAttempts");

                    b.Property<DateTime?>("LastLoginDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2017, 12, 7, 15, 39, 13, 455, DateTimeKind.Local));

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<int>("ShortMessageID");

                    b.Property<bool?>("isDeleted");

                    b.Property<bool>("isLoggedin");

                    b.HasKey("ID");

                    b.HasIndex("ShortMessageID");

                    b.ToTable("EmplonomyUser","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarURL");

                    b.Property<DateTime?>("Birthdate");

                    b.Property<int>("DepartmentID");

                    b.Property<string>("FirstName");

                    b.Property<DateTime?>("HireDate");

                    b.Property<string>("IDNumber");

                    b.Property<int>("JobID");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("PhoneCell");

                    b.Property<string>("PhoneHome");

                    b.Property<string>("PhoneWork");

                    b.Property<DateTime?>("ResignationDate");

                    b.Property<decimal>("Salary")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<bool>("isDeleted");

                    b.Property<bool>("isManager");

                    b.Property<bool>("isOrgManager");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("JobID");

                    b.ToTable("Employee","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Job", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100);

                    b.Property<decimal>("MaxSalary");

                    b.Property<decimal>("MinSalary");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("Job","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.JobHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentID");

                    b.Property<int>("EmployeeID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("StartDate");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("JobHistory","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("StreetName");

                    b.Property<int>("StreetNumber")
                        .HasMaxLength(100);

                    b.Property<string>("Town");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("Location","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Organisation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Industry");

                    b.Property<int>("LocationID");

                    b.Property<string>("OrganisationName")
                        .HasMaxLength(100);

                    b.Property<string>("OrganisationType");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("Organisation","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.OrganisationManager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ManagerID");

                    b.Property<int>("OrganisationID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.HasIndex("OrganisationID");

                    b.ToTable("OrganisationManager","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.PasswordAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PasswordQID");

                    b.Property<string>("QuestionAnswer");

                    b.Property<int>("UserID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("PasswordQID");

                    b.HasIndex("UserID");

                    b.ToTable("PasswordAnswer","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.PasswordQsBank", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PasswordQuestion")
                        .HasMaxLength(100);

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("PasswordQsBank","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Provisioned", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<int>("ShortMessageID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("Provisioned","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.ShortMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<bool>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("ShortMessage","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.SendShortMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("isDeleted");

                    b.Property<int>("smsID");

                    b.Property<int>("smsStatusID");

                    b.HasKey("ID");

                    b.HasIndex("smsID");

                    b.HasIndex("smsStatusID");

                    b.ToTable("SendShortMessage","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.SendSmsStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusDesc")
                        .HasMaxLength(100);

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("SendSmsStatus","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.ShortMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("isDeleted");

                    b.Property<string>("smsText")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("ShortMessage","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.UserAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressTypeID");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("PostalCode");

                    b.Property<bool?>("PrefferedAddress");

                    b.Property<string>("Province");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("Town");

                    b.Property<int>("UserID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("AddressTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAddress","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Department", b =>
                {
                    b.HasOne("Emplonomy.Model.Organisation", "Organisation")
                        .WithMany("Departments")
                        .HasForeignKey("OrganisationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.DepartmentManager", b =>
                {
                    b.HasOne("Emplonomy.Model.Department", "Department")
                        .WithMany("DepartmentManagers")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.Employee", "Employee")
                        .WithMany("DepartmentManagers")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.EmplonomyUser", b =>
                {
                    b.HasOne("Emplonomy.Model.Employee", "Employee")
                        .WithOne("EmplonomyUser")
                        .HasForeignKey("Emplonomy.Model.EmplonomyUser", "ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.ShortMessage", "ShortMessage")
                        .WithMany("Users")
                        .HasForeignKey("ShortMessageID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.Employee", b =>
                {
                    b.HasOne("Emplonomy.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.JobHistory", b =>
                {
                    b.HasOne("Emplonomy.Model.Department", "Department")
                        .WithMany("JobHistories")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.Employee", "Employee")
                        .WithMany("JobHistories")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.Organisation", b =>
                {
                    b.HasOne("Emplonomy.Model.Location", "Location")
                        .WithMany("Organisations")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.OrganisationManager", b =>
                {
                    b.HasOne("Emplonomy.Model.Employee", "Employee")
                        .WithMany("OrganisationManagers")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.Organisation", "Organisation")
                        .WithMany("OrganisationManagers")
                        .HasForeignKey("OrganisationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.PasswordAnswer", b =>
                {
                    b.HasOne("Emplonomy.Model.PasswordQsBank", "PasswordQsBank")
                        .WithMany("PasswordAnswers")
                        .HasForeignKey("PasswordQID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.EmplonomyUser", "EmplonomyUser")
                        .WithMany("PasswordAnswers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.SendShortMessage", b =>
                {
                    b.HasOne("Emplonomy.Model.ShortMessage", "ShortMessage")
                        .WithMany("SendShortMessages")
                        .HasForeignKey("smsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.SendSmsStatus", "SendSmsStatus")
                        .WithMany("SendShortMessages")
                        .HasForeignKey("smsStatusID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.UserAddress", b =>
                {
                    b.HasOne("Emplonomy.Model.AddressType", "AddressType")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.EmplonomyUser", "EmplonomyUser")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
