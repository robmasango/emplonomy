// <auto-generated />
using Emplonomy.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Emplonomy.Model.Migrations
{
    [DbContext(typeof(EmplonomyContext))]
    partial class EmplonomyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Emplonomy.Model.AddressType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressTypeDesc")
                        .HasMaxLength(100);

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("AddressType","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100);

                    b.Property<int>("OrganisationID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("OrganisationID");

                    b.ToTable("Department","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.DepartmentManager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentID");

                    b.Property<int>("ManagerID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("ManagerID");

                    b.ToTable("DepartmentManager","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.EmplonomyUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AgreeTC")
                        .HasColumnName("AgreeTC");

                    b.Property<string>("AvatarURL")
                        .HasColumnName("AvatarURL")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnName("Birthdate");

                    b.Property<bool>("ConfirmedReg")
                        .HasColumnName("ConfirmedReg");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreateDate")
                        .HasDefaultValue(new DateTime(2018, 3, 26, 17, 19, 34, 236, DateTimeKind.Local));

                    b.Property<int>("DepartmentID")
                        .HasColumnName("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailAddressAlt")
                        .HasColumnName("EmailAddressAlt")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnName("EmployeeNumber")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("FailedPasswordAttempts")
                        .HasColumnName("FailedPasswordAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnName("HireDate");

                    b.Property<string>("IDNumber")
                        .HasColumnName("IDNumber")
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked");

                    b.Property<bool>("IsLoggedin")
                        .HasColumnName("IsLoggedin");

                    b.Property<DateTime?>("LastLoginDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LastLoginDate")
                        .HasDefaultValue(new DateTime(2018, 3, 26, 17, 19, 34, 236, DateTimeKind.Local));

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasColumnName("MiddleName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordAnswer")
                        .HasColumnName("PasswordAnswer")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnName("PasswordHash")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PasswordQsBankID");

                    b.Property<int>("PasswordQuestionID")
                        .HasColumnName("PasswordQuestionID")
                        .HasColumnType("int");

                    b.Property<string>("PasswordSalt")
                        .HasColumnName("PasswordSalt")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneCell")
                        .HasColumnName("PhoneCell")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneHome")
                        .HasColumnName("PhoneHome")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneWork")
                        .HasColumnName("PhoneWork")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ResignationDate")
                        .HasColumnName("ResignationDate");

                    b.Property<decimal>("Salary")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Salary")
                        .HasColumnType("Money")
                        .HasDefaultValue(0m);

                    b.Property<int>("UserRoleID")
                        .HasColumnName("RoleID")
                        .HasColumnType("int");

                    b.Property<bool?>("isDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("isManager")
                        .HasColumnName("isManager");

                    b.Property<bool>("isOrgManager")
                        .HasColumnName("isOrgManager");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PasswordQsBankID");

                    b.ToTable("EmplonomyUser","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Error", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 3, 26, 17, 19, 34, 231, DateTimeKind.Local));

                    b.Property<string>("Message");

                    b.Property<string>("StackTrace");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasKey("ID");

                    b.ToTable("Error","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("StreetName");

                    b.Property<int>("StreetNumber")
                        .HasMaxLength(100);

                    b.Property<string>("Town");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("Location","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Organisation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Industry");

                    b.Property<int>("LocationID");

                    b.Property<string>("OrganisationName")
                        .HasMaxLength(100);

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("Organisation","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.OrganisationManager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ManagerID");

                    b.Property<int>("OrganisationID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.HasIndex("OrganisationID");

                    b.ToTable("OrganisationManager","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.PasswordQsBank", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PasswordQuestion")
                        .HasMaxLength(100);

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("PasswordQsBank","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Provisioned", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<int>("RoleID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("Provisioned","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<decimal>("Val");

                    b.Property<bool>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("Role","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.SendShortMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SurveyID");

                    b.Property<bool?>("isDeleted");

                    b.Property<int>("smsID");

                    b.Property<int>("smsStatusID");

                    b.HasKey("ID");

                    b.HasIndex("SurveyID");

                    b.HasIndex("smsID");

                    b.HasIndex("smsStatusID");

                    b.ToTable("SendShortMessage","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.SendSmsStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusDesc")
                        .HasMaxLength(100);

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("SendSmsStatus","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.ShortMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("isDeleted");

                    b.Property<string>("smsText")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("ShortMessage","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Survey", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FrequencyID");

                    b.Property<int>("OrganisationID");

                    b.Property<string>("Title");

                    b.Property<int>("Version");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("FrequencyID");

                    b.HasIndex("OrganisationID");

                    b.ToTable("Survey","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.SurveyFrequency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("NumQuestions");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("SurveyFrequency","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.SurveyQuestion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Driver");

                    b.Property<string>("Question");

                    b.Property<int>("QuestionOrder");

                    b.Property<string>("QuestionType");

                    b.Property<string>("SubDriver");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.ToTable("SurveyQuestion","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.SurveyResponse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Answer");

                    b.Property<int>("QuestionID");

                    b.Property<int>("SurveyID");

                    b.Property<int>("UserID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("SurveyID");

                    b.HasIndex("UserID");

                    b.ToTable("SurveyResponse","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.UserAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressTypeID");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("PostalCode");

                    b.Property<bool?>("PrefferedAddress");

                    b.Property<string>("Province");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("Town");

                    b.Property<int>("UserID");

                    b.Property<bool?>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("AddressTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAddress","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.UserRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EmplonomyUserID");

                    b.Property<int>("RoleID");

                    b.Property<int>("UserID");

                    b.Property<bool>("isDeleted");

                    b.HasKey("ID");

                    b.HasIndex("EmplonomyUserID");

                    b.HasIndex("RoleID");

                    b.ToTable("UserRole","dbo");
                });

            modelBuilder.Entity("Emplonomy.Model.Department", b =>
                {
                    b.HasOne("Emplonomy.Model.Organisation", "Organisation")
                        .WithMany("Departments")
                        .HasForeignKey("OrganisationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.DepartmentManager", b =>
                {
                    b.HasOne("Emplonomy.Model.Department", "Department")
                        .WithMany("DepartmentManagers")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.EmplonomyUser", "EmplonomyUser")
                        .WithMany("DepartmentManagers")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.EmplonomyUser", b =>
                {
                    b.HasOne("Emplonomy.Model.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.PasswordQsBank", "PasswordQsBank")
                        .WithMany("Users")
                        .HasForeignKey("PasswordQsBankID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.Organisation", b =>
                {
                    b.HasOne("Emplonomy.Model.Location", "Location")
                        .WithMany("Organisations")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.OrganisationManager", b =>
                {
                    b.HasOne("Emplonomy.Model.EmplonomyUser", "EmplonomyUser")
                        .WithMany("OrganisationManagers")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.Organisation", "Organisation")
                        .WithMany("OrganisationManagers")
                        .HasForeignKey("OrganisationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.SendShortMessage", b =>
                {
                    b.HasOne("Emplonomy.Model.Survey", "Survey")
                        .WithMany("SendShortMessages")
                        .HasForeignKey("SurveyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.ShortMessage", "ShortMessage")
                        .WithMany("SendShortMessages")
                        .HasForeignKey("smsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.SendSmsStatus", "SendSmsStatus")
                        .WithMany("SendShortMessages")
                        .HasForeignKey("smsStatusID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.Survey", b =>
                {
                    b.HasOne("Emplonomy.Model.SurveyFrequency", "SurveyFrequency")
                        .WithMany("Surveys")
                        .HasForeignKey("FrequencyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.Organisation", "Organisation")
                        .WithMany("Surveys")
                        .HasForeignKey("OrganisationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.SurveyResponse", b =>
                {
                    b.HasOne("Emplonomy.Model.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyResponses")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.Survey", "Survey")
                        .WithMany("SurveyResponses")
                        .HasForeignKey("SurveyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.EmplonomyUser", "EmplonomyUser")
                        .WithMany("SurveyResponses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.UserAddress", b =>
                {
                    b.HasOne("Emplonomy.Model.AddressType", "AddressType")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.EmplonomyUser", "EmplonomyUser")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Emplonomy.Model.UserRole", b =>
                {
                    b.HasOne("Emplonomy.Model.EmplonomyUser", "EmplonomyUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("EmplonomyUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Emplonomy.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
