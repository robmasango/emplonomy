using System.Collections.Generic;using System.Linq;using Emplonomy.Model;using Emplonomy.Logic.Abstract;using System;using Microsoft.EntityFrameworkCore;using Emplonomy.Logic.Security;using System.Security.Principal;namespace Emplonomy.Logic.Repositories{    public class EmplonomyUserRepository : EntityBaseRepository<EmplonomyUser>, IEmplonomyUserRepository    {        private readonly EmplonomyContext _context;        private ICryptoService _cryptoService;        IRoleRepository _roleReposistory;        public EmplonomyUserRepository(EmplonomyContext context, ICryptoService cryptoService, IRoleRepository roleReposistory)        : base(context)        {            this._context = context;            _cryptoService = cryptoService;            _roleReposistory = roleReposistory;        }        public EmplonomyUser signup(int id, string firstname, string lastname, string phonecell)        {            var User = FindSingle(a => a.ID == id);            if (User != null)            {                User.FirstName = firstname;                User.LastName = lastname;                User.PhoneCell = phonecell;            }            return User;        }        public EmplonomyUser GetUserById(int id)        {            var user = FindSingle(id);            return user;        }        public EmplonomyUser GetUserByEmail(string email)        {            var user = FindSingle(x => x.EmailAddress.Equals(email));            return user;        }        public EmplonomyUser GetUserByEmpNum(string empnum)        {            var user = FindSingle(x => x.EmployeeNumber.Equals(empnum));            return user;        }        public EmplonomyUser GetCompleteUserByEmail(string email)        {            var user = _context.Set<EmplonomyUser>()                .Where(x => x.EmailAddress == email && x.isDeleted == false)                .Include(d => d.Department)                .Include(p => p.PasswordQsBank)                .Include(sp => sp.SurveyResponses)                .Include(ua => ua.UserAddresses)                .Include(dm => dm.DepartmentManagers)                .Include(om => om.OrganisationManagers)                .FirstOrDefault();            return user;        }        public EmplonomyUser GetCompletUserByID(int userID)        {            var user = _context.Set<EmplonomyUser>()                .Where(x => x.ID == userID && x.isDeleted == false)                .Include(d => d.Department)                .Include(p => p.PasswordQsBank)                .Include(sp => sp.SurveyResponses)                .Include(ua => ua.UserAddresses)                .Include(dm => dm.DepartmentManagers)                .Include(om => om.OrganisationManagers)                .FirstOrDefault();            return user;        }        public EmplonomyUser GetCompletUserByEmpNum(string empNum)        {            var user = _context.Set<EmplonomyUser>()                .Where(x => x.EmployeeNumber == empNum && x.isDeleted == false)                .Include(d => d.Department)                .Include(p => p.PasswordQsBank)                .Include(sp => sp.SurveyResponses)                .Include(ua => ua.UserAddresses)                .Include(dm => dm.DepartmentManagers)                .Include(om => om.OrganisationManagers)                .FirstOrDefault();            return user;        }        public List<EmplonomyUser> getDeletedManagerEmployees(int depId, bool deleted)        {            var emp = _context.Set<EmplonomyUser>()            .Where(x => x.isDeleted == deleted && x.DepartmentID == depId && x.isManager == false)            .ToList();            return emp;        }        public EmplonomyUser getDepartmentManager(int DepID, bool MangrYes)        {            var emp = _context.Set<EmplonomyUser>()            .Where(x => x.isManager == MangrYes && x.DepartmentID == DepID)            .ToList();            return emp.FirstOrDefault();        }        public List<EmplonomyUser> GetUsersOrdered(string filter = null)        {            var record = _context.Set<EmplonomyUser>()               .OrderBy(c => c.ID)                    .Where(                            c => c.isDeleted == false &&                            c.LastName.ToLower().Contains(filter) ||                            c.FirstName.ToLower().Contains(filter) ||                            c.PhoneCell.ToLower().Contains(filter) ||                            c.IDNumber.ToLower().Contains(filter))                    .ToList();            return record;        }        public List<EmplonomyUser> GetManagerEmployees(int depId)        {            var record = _context.Set<EmplonomyUser>()               .OrderBy(c => c.ID)                    .Where(c => c.isDeleted == false && c.DepartmentID == depId && c.isOrgManager == false)                    .ToList();            return record;        }        public List<EmplonomyUser> GetManagerEmployeesOrdered(int depID, string filter = null)        {            var record = _context.Set<EmplonomyUser>()               .OrderBy(c => c.ID)                    .Where(                            c => c.isDeleted == false &&                            c.DepartmentID == depID &&                            c.isManager == false &&                            c.LastName.ToLower().Contains(filter) ||                            c.FirstName.ToLower().Contains(filter) ||                            c.PhoneCell.ToLower().Contains(filter) ||                            c.IDNumber.ToLower().Contains(filter))                    .ToList();            return record;        }        public List<EmplonomyUser> getDeletedUsers(bool deleted)        {            var user = _context.Set<EmplonomyUser>()            .Include(d => d.Department)            .Include(p => p.PasswordQsBank)            .Include(sp => sp.SurveyResponses)            .Include(ua => ua.UserAddresses)            .Include(dm => dm.DepartmentManagers)            .Include(om => om.OrganisationManagers)            .Where(x => x.isDeleted == deleted)            .ToList();            return user;        }        public EmplonomyUser GetUser(int Id)        {            return FindSingle(Id);        }        public EmplonomyUser RegisterUser(string userEmail, string password,string name, string surname, string phone, int depId)        {            EmplonomyUser user = null;            int? EmpNumber = GetLastUserID() + 1;            DateTime birthdate = new DateTime(1900, 1, 1);            DateTime resignationDate = new DateTime(1900, 1, 1);            var salt = _cryptoService.CreateSalt();            user = new EmplonomyUser            {                DepartmentID = depId,                isManager = false,                EmployeeNumber = "MishiftEmp" + EmpNumber,                EmailAddress = userEmail,                EmailAddressAlt = userEmail,                PasswordHash = _cryptoService.HashPassword(password, salt),                PasswordSalt = salt,                CreateDate = DateTime.Now,                LastLoginDate = DateTime.Now,                IsLoggedin = true,                ConfirmedReg = false,                FailedPasswordAttempts = 0,                AgreeTC = true,                Salary = 0,                FirstName = name,                LastName = surname,                Birthdate = birthdate,                HireDate = DateTime.Now,                ResignationDate = resignationDate,                PhoneCell = phone,                AvatarURL = "AvatarFilePath",                isDeleted = false            };            Add(user);            Commit();            return user;        }        public EmplonomyUser RegisterManager(string userEmail, string password, string name, string surname, string phone, int depId)        {            EmplonomyUser user = null;            int? EmpNumber = GetLastUserID() + 1;            DateTime birthdate = new DateTime(1900, 1, 1);            DateTime resignationDate = new DateTime(1900, 1, 1);            var salt = _cryptoService.CreateSalt();            user = new EmplonomyUser            {                DepartmentID = depId,                isManager = true,                EmployeeNumber = "MishiftEmp" + EmpNumber,                EmailAddress = userEmail,                EmailAddressAlt = userEmail,                PasswordHash = _cryptoService.HashPassword(password, salt),                PasswordSalt = salt,                CreateDate = DateTime.Now,                LastLoginDate = DateTime.Now,                IsLoggedin = true,                ConfirmedReg = false,                FailedPasswordAttempts = 0,                AgreeTC = true,                Salary = 0,                FirstName = name,                LastName = surname,                Birthdate = birthdate,                HireDate = DateTime.Now,                ResignationDate = resignationDate,                PhoneCell = phone,                AvatarURL = "AvatarFilePath",                isDeleted = false            };            Add(user);            Commit();            return user;        }        public bool UserLoginUserName(string empnum, string password)        {            var employee = GetUserByEmpNum(empnum);            if (employee == null)            {                return false;            }            if (IsPasswordValid(employee, password))            {                return true;            }            else                return false;        }        public bool IsPasswordValid(EmplonomyUser user, string password)        {            return _cryptoService.HashPassword(password, user.PasswordSalt) == user.PasswordHash;        }        public MembershipContext ValidateUser(string username, string password)        {            var membershipCtx = new MembershipContext();            var user = GetUserByEmail(username);            if (user != null && IsUserValid(user, password))            {                var userRoles = GetUserRoles(user.EmailAddress);                membershipCtx.EmplonomyUser = user;                var identity = new GenericIdentity(user.EmailAddress);                membershipCtx.Principal = new GenericPrincipal(                    identity,                    userRoles.Select(x => x.Name).ToArray());            }            return membershipCtx;        }        public IEnumerable<Role> GetUserRoles(string username)        {            List<Role> _roles = null;            EmplonomyUser _user = this.FindSingle(u => u.EmailAddress == username, u => u.UserRoles);            if (_user != null)            {                _roles = new List<Role>();                foreach (var _userRole in _user.UserRoles)                    _roles.Add(_roleReposistory.GetRole(_userRole.RoleID));            }            return _roles;        }        private bool IsUserValid(EmplonomyUser user, string password)        {            if (IsPasswordValid(user, password))            {                return !user.IsLocked;            }            return false;        }        public bool UserLogin(string email, string password)        {            var employee = GetUserByEmail(email);            if (employee == null)            {                return false;            }            if (IsPasswordValid(employee, password))            {                return true;            }            else                return false;        }        public EmplonomyUser AssignUserDeletedRestored(int id, bool del)        {            var user = FindSingle(a => a.ID == id);            if (user != null)            {                user.isDeleted = del;                Commit();            }            return user;        }        public EmplonomyUser ConfirmRegistration(int id, bool confirmed)        {            var user = FindSingle(a => a.ID == id);            if (user != null)            {                user.ConfirmedReg = confirmed;                Commit();            }            return user;        }        public EmplonomyUser UpdateUserPassword(string userEmail, string passwordh, string passords)        {            var user = FindSingle(a => a.EmailAddress == userEmail);            if (user != null)            {                user.PasswordHash = passwordh;                user.PasswordSalt = passords;                Commit();            }            return user;        }        public EmplonomyUser AssignUserDepartment(int id, int DepId)        {            var User = FindSingle(a => a.ID == id);            if (User != null)            {                User.DepartmentID = DepId;                Commit();            }            return User;        }        //public EmplonomyUser AssignUserRole(int id, int roleId)        //{        //    var user = FindSingle(a => a.ID == id);        //    if (user != null)        //    {        //        user.RoleID = roleId;        //    }        //    return user;        //}        public EmplonomyUser AssignUserPasswordQuestion(int id, int PwordQId)        {            var User = FindSingle(a => a.ID == id);            if (User != null)            {                User.PasswordQuestionID = PwordQId;                Commit();            }            return User;        }        public void AddUser(EmplonomyUser EmplonomyUser)        {            Add(EmplonomyUser);            Commit();        }        public int CountUsers()        {            return _context.Set<EmplonomyUser>().Count();        }        public void DeleteUser(int Id)        {            DeleteWhere(c => c.ID == Id);            Commit();        }        public void UpdateUser(EmplonomyUser org)        {            Update(org);            Commit();        }        public bool CheckConfirmReg(string email)        {            bool val = false;            var user = _context.Set<EmplonomyUser>()                .FirstOrDefault(x => x.EmailAddress == email);            if (user == null)            { return val; }            else                return user.ConfirmedReg;        }        public bool ValidateEmail(string email)        {            var user = FindSingle(a => a.EmailAddress == email);            if (user != null)            {                return true;            }            return false;        }        public int GetLastUserID()        {            int val = 0;            var user = _context.Set<EmplonomyUser>()                .Max(p => p.ID);            if (user == 0)            { return val; }            else                return user;        }        public int GetNumberOfUsersRegistered()        {            return FindMany(x => x.isDeleted == false).Count;        }        //public int GetNumberOfUserRegisteredByRole(int role)        //{        //    return FindMany(x => x.isDeleted == false && x.RoleID.Equals(role)).Count;        //}        //public string GetUserRoleByEmail(string email)        //{        //    var roleID = _context.Set<EmplonomyUser>()        //        .Where(x => x.EmailAddress.Equals(email))        //        .Select(x => x.RoleID)        //        .FirstOrDefault();        //    return _context.Set<Role>()        //           .Where(x => x.ID == roleID)        //           .Select(x => x.Name)        //           .FirstOrDefault();        //}        //public int GetUserRoleByEmpNum(string empnum)        //{        //    var roleID = _context.Set<EmplonomyUser>()        //        .Where(x => x.EmployeeNumber.Equals(empnum))        //        .Select(x => x.RoleID)        //        .FirstOrDefault();        //    return _context.Set<Role>()        //           .Where(x => x.ID == roleID)        //           .Select(x => x.ID)        //           .FirstOrDefault();        //}        //public int GetUserRoleByID(int userId)        //{        //    var roleID = _context.Set<EmplonomyUser>()        //        .Where(x => x.ID == userId)        //        .Select(x => x.RoleID)        //        .FirstOrDefault();        //    return _context.Set<Role>()        //           .Where(x => x.ID == roleID)        //           .Select(x => x.ID)        //           .FirstOrDefault();        //}    }}